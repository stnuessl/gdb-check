#
# gdb-check
#
# File is automatically generated. 
# Do not edit.
# Creation date: {{ date }}.
#

set confirm off
set pagination off

python
import gdb
import json
import sys
import os
import jinja2

{% raw %}
HTML_TEMPLATE_REPORT = (
    '<h1>Test Summary</h1>'
    '<table>'
        '<thead>'
            '<tr>'
                '<th>Test</th>'
                '<th>Result</th>'
            '</tr>'
        '</thead>'
        '<tbody>'
            '{%- for item in tests %}'
            '<tr>'
                '<td>{{ item.name }}</td>'
                '<td>{{ item.id }}</td>'
                '{%- if item.result %}'
                '<td>PASS</td>'
                '{%- else %}'
                '<td>FAIL</td>'
                '{%- endif %}'
            '</tr>'
            '{%- endfor %}'
        '</tbody>'
    '</table>'
    '<h1> Detailed Test Summary Report</h1>'
    '{%- for item in tests %}'
    '<h2>{{ item.name }}: {{ item.id }}</h2>'
    'Description: {{ item.description }}'
    'Tags: {{ item.tags }}'
    '<h3>Preconditions</h3>'
    '<table>'
        '<thead>'
            '<tr>'
                '<th>Preconditions</th>'
                '<th>Entity</th>'
                '<th>Expected Value</th>'
                '<th>Actual Value</th>'
                '<th>Result</th>'
            '</tr>'
        '</thead>'
        '<tbody>'
            '{%- for data in item.preconditions %}'
            '<tr>'
              '<td>{{ data.expr }}</td>'
                '<td>{{ data.entity }}</td>'
                '<td>{{ data.expected }}</td>'
                '<td>{{ data.actual }}</td>'
                '{%- if data.expected == data.actual %}'
                '<td>PASS</td>'
                '{%- else %}'
                '<td>FAIL</td>'
                '{%- endif %}'
            '</tr>'
            '{%- endfor %}'
        '</tbody>'
    '</table>'
    '{%- endfor %}'
)
{% endraw %}

# Python command to suppress gdb errors
class GdbSilentCommand(gdb.Command):
    def __init__(self):
        name = 'gdb-silent-command'
        cmd_type = gdb.COMMAND_OBSCURE
        completion = gdb.COMPLETE_COMMAND

        super(GdbSilentCommand, self).__init__(name, cmd_type, completion)

    def invoke(self, arg, from_tty):
        try:
            gdb.execute(arg, from_tty)
        except gdb.error as err:
            pass

class TestManager():
    instance = None

    def __init__(self):
        self.tests = []
        self.test = None
  
    def set_test(self, test):
        self.tests.append(test)

    def check_failed(self, what, expr):
        for item in self.tests[-1][what]:

            # Deliberately do not break out of the loops, as
            # the user could have specified the same condition 
            # multiple times.
            if item['expr'] == expr:
                entity = item['entity']

                if entity == '$':
                    val = gdb.history(0)
                elif entity.startswith('$'):
                    index = int(entity[:1])
                    val = gdb.history(index)
                else:
                    symbol, _ = gdb.lookup_symbol(var)
                    val = symbol.value()

                item['actual'] = str(val)
                self.tests[-1]['result'] = False

    def test_failed(self, what, condition):
        var = condition.split('==')[0].strip()

        if var == '$':
            val = gdb.history(0)
        elif var.startswith('$'):
            index = int(var[:1])
            val = gdb.history(index)
        else:
            symbol, _ = gdb.lookup_symbol(var)
            val = symbol.value()

        info = {
            'test' : self.test,
            'result' : False,
            'what' : what,
            'condition' : condition,
            'var' : var,
            'value' : val,
        }

        self.results.append(info)
        self.test = None

    def report(self, out=sys.stdout):
        context = {
            'tests' : self.tests,
        }

        template = jinja2.Template(HTML_TEMPLATE_REPORT)
        html = template.render(context)

        print(html)

        if isinstance(out, str) and os.path.isfile(out):
            out = open(out, 'w') 

#        for x in self.results:
#            name = x['test']['name']
#
#            if x['result']:
#                print('Test "{}": PASSED'.format(name))
#            else:
#                text = [
#                    'Test "{}": FAILED'.format(name),
#                    '** {} "{}" is violated'.format(x['what'], x['condition']),
#                    '** Observed: {} = {}'.format(x['var'], x['value']),
#                ]
#
#                print('\n'.join(text), file=out)
    
    @staticmethod
    def get():
        if TestManager.instance == None:
            TestManager.instance = TestManager()

        return TestManager.instance
        
def main():
    GdbSilentCommand()

if __name__ == '__main__':
    main()
end

set logging redirect {{ logging_redirect_on }}
set logging {{ logging_on }}
file {{ binary }}
start

{%- for test in tests %}
{%- if test.enable %}
# BEGIN "{{ test.name }}"
# BEGIN TEST STUBS "{{ test.name }}"
python TestManager.get().set_test({{ test }})
{%- for stub in test.stubs %}
break {{ stub.function }}
commands
silent
return {{ stub.return }}
{%- for expr in stub.postactions %}
set variable {{ expr }}
{%- endfor %}
continue
end
# END TEST STUBS "{{ test.name }}"
tbreak {{ test.function }}
# PRECONDITIONS "{{ test.name }}"
{%- for item in test.preconditions %}
if !({{ item.expr }})
python TestManager.get().check_failed('preconditions', '{{ item.expr }}')
end
{%- endfor %}
gdb-silent-command call {{ test.function }}({{test.arguments}})
{%- for expr in test.stimulation %}
set variable {{ expr }}
{%- endfor %}
finish
# EXPECTATIONS "{{ test.name }}"
{%- for item in test.expectation %}
if !({{ item.expr }})
python TestManager.get().check_failed('expectation', '{{ item.expr }}')
end
{%- endfor %}
# POSTCONDITIONS "{{ test.name }}"
{%- for item in test.postconditions %}
if !({{ item.expr }})
python TestManager.get().check_failed('postconditions', '{{ item.expr }}')
end
{%- endfor %}
delete breakpoints
{%- endfor %}
# END TEST_STUBS "{{ test.name }}"
# END "{{ test.name }}"
{%- else %}
# DISABLED "{{ test.name }}"
{%- endif %}
{%- endfor %}
python TestManager.get().report({{ report }})
quit
